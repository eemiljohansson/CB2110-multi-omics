---
title: "Untitled"
format: html
---

# Load packages

```{r}
library(tidyverse)
library(readxl)
library(ggridges)
library(MOFA2)
library(reticulate)
library(patchwork)
```

```{r}
select <- dplyr::select
```

# Read data

```{r}
covid_metadata <- read_excel("~/R/CB2110-multi-omics/datasets/COVIDome Datasets Version 2.0/COVIDome Sample Metadata.xlsx")
covid_soma_data <- read_excel("~/R/CB2110-multi-omics/datasets/COVIDome Datasets Version 2.0/COVIDome SOMAscan Dataset.xlsx")
covid_cytokine_data <- read_excel("~/R/CB2110-multi-omics/datasets/COVIDome Datasets Version 2.0/COVIDome MSD Cytokine Dataset v2.0 for Mendeley 071321.xlsx")
```

# Clean data

## Metadata

```{r}
head(covid_metadata, n = 10)
```

One approximation that we are doing in this study is to assume that the patients that were below 20 years of age are of 20 years of age. This is because we want to retain as many samples as possible, and the number of patients below 20 years of age is very small.

```{r}
covid_metadata <- covid_metadata |>
  mutate(Age = ifelse(Age < 20, 20, Age)) |> # replace ages below 20 with 20
  mutate(Age = as.numeric(Age)) |> # convert Age to numeric
  mutate(Age = ifelse(is.na(Age), median(Age, na.rm = TRUE), Age)) # replace NAs with median age
```

Let's check the data again.

```{r}
head(covid_metadata, n = 10)
```

## Somalogic data

Do we have samples as row or columns in this dataframe?
MOFA requires samples as columns and features as rows.
How many analytes do we have in this dataset?
What is the unit of the analytes?

```{r}
head(covid_soma_data, n = 10)
```

We are going to stick with the Analyte, since that is the same column name in the cytokine data.
Also, since the data shows intensity values that have a wide range, we will log-transform the data to make it more manageable for analysis.

```{r}
covid_soma_data <- covid_soma_data |>
  select(Analyte, contains("CUcovID")) |> # keep only the EntrezGeneSymbol and intensity columns
  pivot_longer(cols = -Analyte, names_to = "Sample", values_to = "Intensity") |> # pivot to long format
  mutate(Intensity = log2(Intensity + 1)) |> # log-transform the intensity values
  pivot_wider(names_from = Sample, values_from = Intensity) |> # pivot back to wide format with samples as columns
  unnest()
```

Let's check the data again

```{r}
head(covid_soma_data, n = 10)
```

## Cytokine data

We seem to have missing values in the cytokine data. How should we handle them?
We will choose to mean impute those values. What is mean imputation? How does that affect our data? What is the benefits and drawbacks of this approach? What other approaches are there?

```{r}
head(covid_cytokine_data, n = 10)
```

We should also log-transform the data to make it more manageable for analysis, just like we did with the SOMAscan data.
Could we have log-transformed the data before mean imputation? What would have been the effect of that?

```{r}
covid_cytokine_data <- covid_cytokine_data |>
  select(Analyte, contains("CUcovID")) |> # keep only the EntrezGeneSymbol and intensity columns
  pivot_longer(cols = -Analyte, names_to = "Sample", values_to = "Intensity") |> # pivot to long format
  mutate(Intensity = ifelse(is.na(Intensity), mean(Intensity, na.rm = TRUE), Intensity)) |> # mean impute the intensity values
  mutate(Intensity = log2(Intensity + 1)) |> # log-transform the intensity values
  pivot_wider(names_from = Sample, values_from = Intensity) |> # pivot back to wide format with samples as columns
  unnest()
```

Let's check the data again. Are the missing values gone?

```{r}
head(covid_cytokine_data, n = 10)
```

# Check data

## Metadata

Let's check the distribution of COVID_status, Sex, and Age.
What can you tell from this information?
How is the distribution of Male / Female in positive / negative COVID status?

```{r}
# Count the COVID_status and divide it into Sex
covid_metadata |>
  group_by(COVID_status, Sex) |>
  summarise(Count = n()) |>
  pivot_longer(cols = Count, names_to = "Count_Type", values_to = "Count") |>
  ggplot(aes(x = Count, y = COVID_status, fill = Sex)) +
  geom_bar(stat = "identity", position = "dodge") +
  theme_minimal()

ggsave("../plots/pdf/metadata_sex_covid_status.pdf", width = 8, height = 6)
ggsave("../plots/png/metadata_sex_covid_status.png", width = 8, height = 6)

# Check the distribution of Age
covid_metadata |>
  ggplot(aes(x = Age, fill = COVID_status)) +
  geom_histogram(bins = 30, position = "dodge") +
  theme_minimal() +
  labs(title = "Distribution of Age by COVID Status", x = "Age", y = "Count")

# Distribution as a ridge plot (age)
covid_metadata |>
  ggplot(aes(x = Age, y = COVID_status, fill = COVID_status)) +
  geom_density_ridges(alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribution of Age by COVID Status", x = "Age", y = "COVID Status")

# Distribution as a ridge plot (sex)
covid_metadata |>
  ggplot(aes(x = Age, y = COVID_status, fill = Sex)) +
  geom_density_ridges(alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribution of Age by COVID Status", x = "Age", y = "COVID Status")
```

## Somalogic data

Let's check the dimensions of the SOMAscan dataset. What platform was used? Does our dataset match the same number of analytes in that platform, if no, why?
What type of proteins seem to have the highest mean intensity values? Are these proteins related to COVID-19? What have we not taken into account in this analysis?

```{r}
covid_soma_data |>
  dim()

# Rank the analytes in terms of their mean intensity values
covid_soma_data |>
  # Make columns into rows and rows into columns
  rowwise() |>
  mutate(Mean_Intensity = mean(c_across(-Analyte), na.rm = TRUE)) |>
  arrange(desc(Mean_Intensity)) |>
  select(Analyte, Mean_Intensity) |>
  head(20)
```

## Cytokine data

What type of proteins seem to have the highest mean intensity values? Are these proteins related to COVID-19? What have we not taken into account in this analysis?
Can you find CRP? Does it have a high mean intensity value? What does that tell you about the data? Does its intesity value make sense or could it be an effect of something else?

```{r}
covid_cytokine_data |>
  dim()

# Rank the analytes in terms of their mean intensity values
covid_cytokine_data |>
  # Make columns into rows and rows into columns
  rowwise() |>
  mutate(Mean_Intensity = mean(c_across(-Analyte), na.rm = TRUE)) |>
  arrange(desc(Mean_Intensity)) |>
  select(Analyte, Mean_Intensity) |>
  head(20)
```

# Creating the MOFA model and train the model

First we need to put the analytes as rownames

```{r}
COVID_data <- list(
  somalogic = covid_soma_data |>
    mutate(Analyte = make.unique(Analyte)) |>
    column_to_rownames("Analyte"),
  cytokine  = covid_cytokine_data |>
    mutate(Analyte = make.unique(Analyte)) |>
    column_to_rownames("Analyte")
)

COVID_data
```

We need to transform each dataframe into a matrix, since MOFA requires matrices as input.

```{r}
COVID_matrices <- lapply(COVID_data, function(df){
  m <- as.matrix(df)
  storage.mode(m) <- "numeric"   # just to be sure it’s all numeric
  m
})

str(COVID_matrices$somalogic)
```

Try to break some of the code. What do MOFA require the input to be in order to create the MOFA object?

```{r}
# 1. Inspect the two sets of column names
colnames(COVID_matrices$somalogic)
colnames(COVID_matrices$cytokine)

# 2. Find the intersection (samples present in both)
common_samples <- intersect(
  colnames(COVID_matrices$somalogic),
  colnames(COVID_matrices$cytokine)
)
length(common_samples)  # how many samples survived?
```


```{r}
# 1. A little helper to replace Greek letters with ASCII names
clean_feature_names <- function(x) {
  x %>%
    str_replace_all("α", "alpha") %>%
    str_replace_all("β", "beta")  %>%
    str_replace_all("γ", "gamma") %>%
    str_replace_all("–", "-")      # if you have en-dashes etc.
}

# 3. Subset & reorder each matrix so they match exactly
COVID_matrices_aligned <- lapply(COVID_matrices, function(mat) {
  mat[, common_samples, drop = FALSE]
})


# 2. Apply it to each view’s rownames
COVID_matrices_clean <- lapply(COVID_matrices_aligned, function(mat) {
  rn <- rownames(mat)
  rownames(mat) <- clean_feature_names(rn)
  mat
})

# 3. (Optional) Check that there are no more non-ASCII chars
bad <- unique(unlist(lapply(COVID_matrices_clean, function(mat) {
  rn <- rownames(mat)
  grep("[^ -~]", rn, value = TRUE)
})))
if (length(bad)) stop("Still non-ASCII names: ", paste(bad, collapse = ", "))

# 4. Now rebuild
MOFAobject <- create_mofa(COVID_matrices_clean)
MOFAobject
class(MOFAobject)
```

## Plot data overview

Visualize the number of views (rows) and the number of groups (columns) exist, what are their corresponding dimensionalities and how many missing information they have (grey bars).

```{r}
plot_data_overview(MOFAobject)
```

## Question 2

How is the distribution of the multi-omics data set? Are there any potential biases that could be introduced based on the number of measurement coverage per omics technology?

## Define MOFA options

### Data options

Important arguments:

* scale_groups: scale groups to the same total variance? Default is FALSE
* scale_views: scale views to the same total variance? Default is FALSE
* views: views names
* groups: groups names

```{r}
data_opts <- get_default_data_options(MOFAobject)
data_opts
```

## Model options

Important arguments:

* num_factors: number of factors
* likelihoods: likelihood per view (options are “gaussian”, “poisson”, “bernoulli”). By default they are inferred automatically.
* spikeslab_factors: use spike-slab sparsity prior in the factors? default is FALSE.
* spikeslab_weights: use spike-slab sparsity prior in the weights? default is TRUE.
* ard_factors: use ARD prior in the factors? Default is TRUE if using multiple groups.
* ard_weights: use ARD prior in the weights? Default is TRUE if using multiple views.

```{r}
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10 # This sets the number of factors

model_opts
```

## Training options

Important arguments:

* maxiter: number of iterations. Default is 1000.
* convergence_mode: “fast”, “medium” (default), “slow”. For exploration, the fast mode is good enough.
* seed: random seed

```{r}
train_opts <- get_default_training_options(MOFAobject)
train_opts$convergence_mode <- "slow"
train_opts$seed <- 42

train_opts
```

## Train the MOFA model

Prepare the MOFA object

```{r}
MOFAobject <- prepare_mofa(MOFAobject,
  data_options = data_opts,
  model_options = model_opts,
  training_options = train_opts
)

MOFAobject
```

Train the MOFA model. Remember that in this step the MOFA2 R package connets with the mofapy2 Python package using reticulate. This is the source of most problems when running MOFA. See our FAQ section if you have issues. The output is saved in the file specified as outfile. If none is specified, the output is saved in a temporary location.

```{r}
#outfile = file.path(tempdir(),"model.hdf5")
#MOFAobject.trained <- run_mofa(MOFAobject, outfile, use_basilisk=TRUE)
```


```{r}
Sys.setenv(HDF5_DIR = system("brew --prefix hdf5", intern = TRUE))
```

If it doesn't work with use_basilisk = TRUE, try with use_basilisk = FALSE. This will use the conda environment you have set up with reticulate.
Then run this script in your terminal:

conda create -n mofa2 python=3.10 \
  numpy=1.23.1 scipy=1.8.1 pandas=1.4.3 \
  scikit-learn=1.1.1 dtw-python=1.2.2 h5py=3.6.0 -c conda-forge

conda activate mofa2
pip install mofapy2==0.7.0

```{r}
library(reticulate)

# Activate your working mofa2 conda environment
use_condaenv("mofa2", required = TRUE)

# Ensure MOFA2 sees your correct Python:
reticulate::py_config()

# Now run MOFA without Basilisk
outfile <- "../data/covid/covid_model.hdf5"
MOFAobject.trained <- run_mofa(MOFAobject, outfile, use_basilisk=FALSE)
```

```{r}
MOFAobject.trained
```

Now if you wish to save the model, you can do so with the following command:

```{r}
print(filepath)
```

```{r}
slotNames(MOFAobject.trained)
```

```{r}
names(MOFAobject.trained@data)
```

```{r}
dim(MOFAobject.trained@data$somalogic$group1)
dim(MOFAobject.trained@data$cytokine$group1)
```

```{r}
names(MOFAobject.trained@expectations)
```

Check the dimensionality of the factor matrix. How many factors do we have? How many samples do we have?

```{r}
dim(MOFAobject.trained@expectations$Z$group1)
```

Dimensionality of the matrices

```{r}
dim(MOFAobject.trained@expectations$W$somalogic)
dim(MOFAobject.trained@expectations$W$cytokine)
```

```{r}
# Add sample metadata to the model
samples_metadata(MOFAobject.trained) <- covid_metadata |> rename(sample = RecordID) |>
  filter(sample %in% samples_names(MOFAobject.trained)$group1) |> as.data.frame()
```

```{r}
plot_factor_cor(MOFAobject.trained)
```

```{r}
# Total variance explained per view and group
head(MOFAobject.trained@cache$variance_explained$r2_total[[1]]) # group 1
```

```{r}
# Variance explained for every factor in per view and group
head(MOFAobject.trained@cache$variance_explained$r2_per_factor[[1]]) # group 1
```

```{r}
plot_variance_explained(MOFAobject.trained, x="view", y="factor")
```

```{r}
plot_variance_explained(MOFAobject.trained, x="group", y="factor", plot_total = T)[[2]]
```

```{r}
plot_factor(MOFAobject.trained, 
  factor = 1:10,
  color_by = "Age",
  shape_by = "COVID_status"
)
```

```{r}
p <- plot_factor(MOFAobject.trained, 
  factors = 1:10,
  color_by = "COVID_status",
  dot_size = 3,        # change dot size
  dodge = T,           # dodge points with different colors
  legend = F,          # remove legend
  add_violin = T,      # add violin plots,
  violin_alpha = 0.25  # transparency of violin plots
)

# The output of plot_factor is a ggplot2 object that we can edit
p <- p + 
  scale_color_manual(values=c("Positive"="black", "Negative"="red")) +
  scale_fill_manual(values=c("Positive"="black", "Negative"="red"))

print(p)
```

```{r}
plot_factors(MOFAobject.trained, 
  factors = 1:10,
  color_by = "COVID_status"
)
```

Take factor 3 for instance. Do the top contributing features make sense? What do they represent? Are they related to COVID-19? Can they be connected to previous downstream analysis?

```{r}
# Plotting somalogic weights
plot_weights(MOFAobject.trained,
  view = 1,
  factor = 3,
  nfeatures = 10,     # Number of features to highlight
  scale = T,          # Scale weights from -1 to 1
  abs = F             # Take the absolute value?
) +

  # Plotting cytokine weights
  plot_weights(MOFAobject.trained,
  view = 2,
  factor = 3,
  nfeatures = 10,     # Number of features to highlight
  scale = T,          # Scale weights from -1 to 1
  abs = F             # Take the absolute value?
)
```

```{r}
plot_top_weights(MOFAobject.trained,
  view = 1,
  factor = 3,
  nfeatures = 10
) +
  plot_top_weights(MOFAobject.trained,
  view = 2,
  factor = 3,
  nfeatures = 10
)
```

Is the expression homogenous across the samples or can you hint about subgroups (hint: FABPA, H2A3, H2B3B)
Are there any outliers among the samples? Is it more visible from the somalogic data or the cytokine data?

```{r}
plot_data_heatmap(MOFAobject.trained,
  view = 1,         # view of interest
  factor = 3,             # factor of interest
  features = 20,          # number of features to plot (they are selected by weight)
  
  # extra arguments that are passed to the `pheatmap` function
  cluster_rows = TRUE, cluster_cols = FALSE,
  show_rownames = TRUE, show_colnames = FALSE
)

plot_data_heatmap(MOFAobject.trained,
  view = 2,         # view of interest
  factor = 3,             # factor of interest
  features = 20,          # number of features to plot (they are selected by weight)
  
  # extra arguments that are passed to the `pheatmap` function
  cluster_rows = TRUE, cluster_cols = FALSE,
  show_rownames = TRUE, show_colnames = FALSE
)
```

```{r}
plot_data_scatter(MOFAobject.trained,
  view = 1,         # view of interest
  factor = 3,             # factor of interest
  features = 5,           # number of features to plot (they are selected by weight)
  add_lm = TRUE,          # add linear regression
  color_by = "COVID_status"
) +
  plot_data_scatter(MOFAobject.trained,
  view = 2,         # view of interest
  factor = 3,             # factor of interest
  features = 5,           # number of features to plot (they are selected by weight)
  add_lm = TRUE,          # add linear regression
  color_by = "COVID_status"
)
```

```{r}
set.seed(42)
umap_model <- run_umap(MOFAobject.trained)
tsne_model <- run_tsne(MOFAobject.trained)
```

```{r}
plot_dimred(umap_model,
  method = "UMAP",  # method can be either "TSNE" or "UMAP"
  color_by = "COVID_status"
)

plot_dimred(tsne_model,
  method = "TSNE",  # method can be either "TSNE" or "UMAP"
  color_by = "COVID_status"
)
```


# SessionInfo

```{r}
sessionInfo()
```


```{r}
library(data.table)
library(pheatmap)
library()
```

